# This workflow will deploy a specific build artifact into selected Azure App Services
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Deploy To Azure App Services

run-name: >-
  ${{ format('Deploying {0} into Azure AppServices{1} {2}',
  ((github.event_name == 'repository_dispatch' && github.event.client_payload.is-pre-release) || (!startsWith(github.ref, 'refs/tags/v')) && '[Untagged Build]' || (github.event.client_payload.github.ref_name || github.ref_name)),
  ':', github.event.client_payload.environment || inputs.environment) }}

on:
  repository_dispatch:
    types: [new-deploy-artifacts-available]

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to Deploy'
        type: environment
        default: 'B2B Dev'
        required: true
      artifacts-name:
        description: 'Artifacts'
        type: choice
        default: 'ZipDeployPackages'
        required: true
        options:
          - ZipDeployPackages
      deploy-to-webstore:
        description: 'Deploy to WebStore'
        type: boolean
        default: true
      deploy-to-webportal:
        description: 'Deploy to WebPortal'
        type: boolean
        default: true
      deploy-to-webservices:
        description: 'Deploy to WebServices'
        type: boolean
        default: true
      deploy-to-webfeeds:
        description: 'Deploy to WebFeeds'
        type: boolean
        default: false
      deploy-to-webaccounts:
        description: 'Deploy to WebAccounts'
        type: boolean
        default: false

jobs:
  environment-details:
    uses: ./.github/workflows/Environments.yml
    name: Environment Details
    with:
      environment-name: ${{ github.event.inputs.environment || github.event.client_payload.environment }}

  resolve-deployments:
    runs-on: ubuntu-latest
    name: Resolve Deployment Artifacts
    env:
      WEBSTORE: ${{ inputs.deploy-to-webstore || github.event_name == 'repository_dispatch' }}
      MANAGER: ${{ inputs.deploy-to-webportal || github.event_name == 'repository_dispatch' }}
      SERVICES: ${{ inputs.deploy-to-webservices || github.event_name == 'repository_dispatch' }}
      FEEDS: ${{ inputs.deploy-to-webfeeds || github.event_name == 'repository_dispatch' }}
      ACCOUNTS: ${{ inputs.deploy-to-webaccounts }}
      SKIP_ALL: ${{ github.event_name != 'repository_dispatch' && !inputs.deploy-to-webstore && !inputs.deploy-to-webportal && !inputs.deploy-to-webservices && !inputs.deploy-to-webfeeds && !inputs.deploy-to-webaccounts }}
    outputs:
      webstore: ${{ steps.set-deployment-flags.outputs.webstore }}
      manager: ${{ steps.set-deployment-flags.outputs.manager }}
      services: ${{ steps.set-deployment-flags.outputs.services }}
      feeds: ${{ steps.set-deployment-flags.outputs.feeds }}
      accounts: ${{ steps.set-deployment-flags.outputs.accounts }}
      skip-all: ${{ steps.set-deployment-flags.outputs.skip-all }}
      appservices: ${{ steps.set-deployment-matrix.outputs.appservices }}
    steps:

    - name: Set Deployment Flags
      id: set-deployment-flags
      run: |
        (
          echo "webstore=${{ env.WEBSTORE }}" >> $GITHUB_OUTPUT
          echo "manager=${{ env.MANAGER }}" >> $GITHUB_OUTPUT
          echo "services=${{ env.SERVICES }}" >> $GITHUB_OUTPUT
          echo "feeds=${{ env.FEEDS }}" >> $GITHUB_OUTPUT
          echo "accounts=${{ env.ACCOUNTS }}" >> $GITHUB_OUTPUT
          echo "skip-all=${{ env.SKIP_ALL }}" >> $GITHUB_OUTPUT
        )

    - name: Create Deployment Matrix
      id: set-deployment-matrix
      if: ${{ env.SKIP_ALL != 'true' }}
      run: |
        matrix_file="${{ runner.temp }}/appservice-matrix.txt"
        touch ${matrix_file}
        (shopt -s nocasematch;
          if [[ "${{ env.WEBSTORE }}" == "true" ]]; then
            echo "webstore" > ${matrix_file}
          fi
          if [[ "${{ env.MANAGER }}" == "true" ]]; then
            echo "manager" > ${matrix_file}
          fi
          if [[ "${{ env.SERVICES }}" == "true" ]]; then
            echo "services" > ${matrix_file}
          fi
          if [[ "${{ env.FEEDS }}" == "true" ]]; then
            echo "feeds" > ${matrix_file}
          fi
          if [[ "${{ env.ACCOUNTS }}" == "true" ]]; then
            echo "accounts" > ${matrix_file}
          fi
        )
        echo "appservices=$(jq -R -s 'split("\n") | map(select(. != ""))' "${matrix_file}")" >> $GITHUB_OUTPUT
        
    - name: Download All Deployment Artifacts
      if: ${{ env.SKIP_ALL != 'true' }}
      uses: dawidd6/action-download-artifact@v8
      with:
        github_token: ${{ secrets.FASTCHANNEL_MIRANDAASM_PAT }}
        workflow: Build.yml
        workflow_conclusion: success
        name: ${{ github.event.inputs.artifacts-name || github.event.client_payload.artifacts-name }}
        path: ./artifacts
        
    - name: Upload WebStore Deployment Artifact
      if: ${{ env.WEBSTORE == 'true' }}
      uses: actions/upload-artifact@v4
      with:        
        name: webstore # Artifact name must match one of the 'appservice' Matrix names on the next job
        path: artifacts/fastchannel-webstore-zipdeploy.zip
        if-no-files-found: error
        compression-level: 0

    - name: Upload WebPortal Deployment Artifact
      if: ${{ env.MANAGER == 'true' }}
      uses: actions/upload-artifact@v4
      with:        
        name: manager # Artifact name must match one of the 'appservice' Matrix names on the next job
        path: artifacts/fastchannel-manager-zipdeploy.zip
        if-no-files-found: error
        compression-level: 0

    - name: Upload WebServices Deployment Artifact
      if: ${{ env.SERVICES == 'true' }}
      uses: actions/upload-artifact@v4
      with:        
        name: services # Artifact name must match one of the 'appservice' Matrix names on the next job
        path: artifacts/fastchannel-services-zipdeploy.zip
        if-no-files-found: error
        compression-level: 0

    - name: Upload WebFeeds Deployment Artifact
      if: ${{ env.FEEDS == 'true' }}
      uses: actions/upload-artifact@v4
      with:        
        name: feeds # Artifact name must match one of the 'appservice' Matrix names on the next job
        path: artifacts/fastchannel-feeds-zipdeploy.zip
        if-no-files-found: error
        compression-level: 0

    - name: Upload WebAccounts Deployment Artifact
      if: ${{ env.ACCOUNTS == 'true' }}
      uses: actions/upload-artifact@v4
      with:        
        name: accounts # Artifact name must match one of the 'appservice' Matrix names on the next job
        path: artifacts/fastchannel-accounts-zipdeploy.zip
        if-no-files-found: error
        compression-level: 0

  appservice-deployment:
    needs: [environment-details, resolve-deployments]
    name: ${{ format('fastchannel-{0}-{1}', matrix.appservice, needs.environment-details.outputs.appservice-suffix) }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    if: ${{ needs.resolve-deployments.outputs.skip-all == 'false' }}
    strategy:
      fail-fast: false
      matrix:
        appservice: ${{ fromJSON(needs.resolve-deployments.outputs.appservices) }}
        os: [windows-latest]
    
    environment:
      name: ${{ needs.environment-details.outputs.name }}
      url: ${{ needs.environment-details.outputs.url }}

    env:
      DEPLOYMENT_SKIPPED: false
      APPSERVICE_PACKAGE: ${{ github.workspace }}/artifacts/fastchannel-${{ matrix.appservice }}-zipdeploy.zip
      APPSERVICE_NAME: ${{ format('fastchannel-{0}{1}', matrix.appservice, format('{0}{1}', matrix.appservice != 'accounts' && '-' || '', matrix.appservice != 'accounts' && needs.environment-details.outputs.appservice-suffix || '')) }}

    steps:
    - name: Assert Deployment Flags
      run: >-
        "DEPLOYMENT_SKIPPED=${{
          needs.resolve-deployments.outputs.skip-all == 'true' ||
          needs.resolve-deployments.outputs[matrix.appservice] != 'true' }}" >> $env:GITHUB_ENV
        echo "DEPLOYMENT_SKIPPED=$env:DEPLOYMENT_SKIPPED"
    
    - name: Skipped ${{ env.APPSERVICE_NAME }} deployment
      if: ${{ env.DEPLOYMENT_SKIPPED == 'true' }}
      run: echo "Deployment skipped for app ${{ env.APPSERVICE_NAME }}"
      
    - name: 'Download [${{ matrix.appservice }}] Artifact'
      if: ${{ env.DEPLOYMENT_SKIPPED != 'true' }}
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: ./artifacts
        name: ${{ matrix.appservice }}

    - name: Login via Azure CLI
      if: ${{ env.DEPLOYMENT_SKIPPED != 'true' }}
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy To Azure App Service
      if: ${{ env.DEPLOYMENT_SKIPPED != 'true' }}
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.APPSERVICE_NAME }}
        package: ${{ env.APPSERVICE_PACKAGE }}

  cleanup-resources:
    needs: [appservice-deployment]
    name: Cleanup Resources
    runs-on: windows-latest
    if: always()
    steps:
    - name: Cleanup Deployment Artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          webstore
          manager
          services
          feeds
          accounts
