# This workflow will deploy a specific build artifact into selected Azure App Services
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Deploy To Azure AppServices

run-name: >-
  ${{ format('Deploying {0} into Azure AppServices{1} {2}',
  ((github.event_name == 'repository_dispatch' && github.event.client_payload.run_name) || (startsWith(github.ref, 'refs/tags/v') && github.ref_name) || '[Untagged Build]'),
  ':', github.event.client_payload.environment || inputs.environment) }}

on:
  repository_dispatch:
    types: [ci-deployment-requested]

  workflow_dispatch:
    inputs:
      artifacts-source:
        description: 'Artifacts Source'
        type: choice
        default: 'Release'
        required: true
        options:
          - 'Release'
          - 'Build_On_Demand.yml'
      environment:
        description: 'Environment to Deploy'
        type: environment
        default: 'B2B Dev'
        required: true
      deploy-to-webstore:
        description: 'Deploy to WebStore'
        type: boolean
        default: true
      deploy-to-webportal:
        description: 'Deploy to WebPortal'
        type: boolean
        default: true
      deploy-to-webservices:
        description: 'Deploy to WebServices'
        type: boolean
        default: true
      deploy-to-webfeeds:
        description: 'Deploy to WebFeeds'
        type: boolean
        default: false
      deploy-to-webaccounts:
        description: 'Deploy to WebAccounts'
        type: boolean
        default: false

jobs:
  environment-details:
    uses: ./.github/workflows/ᐳ_Environments.yml
    name: Environment Details
    with:
      environment-name: ${{ github.event.inputs.environment || github.event.client_payload.environment }}

  resolve-deployment-tasks:
    runs-on: ubuntu-latest
    name: Resolve Deployment Tasks
    env:
      WEBSTORE: ${{ (inputs.deploy-to-webstore || github.event_name == 'repository_dispatch') && 'true' || 'false' }}
      MANAGER: ${{ (inputs.deploy-to-webportal || github.event_name == 'repository_dispatch') && 'true' || 'false' }}
      SERVICES: ${{ (inputs.deploy-to-webservices || github.event_name == 'repository_dispatch') && 'true' || 'false' }}
      FEEDS: ${{ (inputs.deploy-to-webfeeds || github.event_name == 'repository_dispatch') && 'true' || 'false' }}
      ACCOUNTS: ${{ (inputs.deploy-to-webaccounts && 'true') || 'false' }}
      SKIP_ALL: ${{ (github.event_name == 'workflow_dispatch' && !inputs.deploy-to-webstore && !inputs.deploy-to-webportal && !inputs.deploy-to-webservices && !inputs.deploy-to-webfeeds && !inputs.deploy-to-webaccounts && 'true') || 'false' }}
      RELEASE_VERSION: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.release_version) || (startsWith(github.ref, 'refs/tags/v') && github.ref_name) || '' }}
      DOWNLOAD_ARTIFACTS_FROM: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.download_artifacts_from || inputs.artifacts-source }}
    outputs:
      webstore: ${{ steps.set-deployment-flags.outputs.webstore }}
      manager: ${{ steps.set-deployment-flags.outputs.manager }}
      services: ${{ steps.set-deployment-flags.outputs.services }}
      feeds: ${{ steps.set-deployment-flags.outputs.feeds }}
      accounts: ${{ steps.set-deployment-flags.outputs.accounts }}
      skip-all: ${{ steps.set-deployment-flags.outputs.skip-all }}
      release-version: ${{ steps.set-deployment-flags.outputs.release-version }}
      download-artifacts-from: ${{ steps.set-deployment-flags.outputs.download-artifacts-from }}
      appservices: ${{ steps.set-deployment-matrix.outputs.appservices }}
    steps:

    - name: Set Deployment Flags
      id: set-deployment-flags
      run: |
        (
          echo "webstore=${{ env.WEBSTORE }}" >> $GITHUB_OUTPUT
          echo "manager=${{ env.MANAGER }}" >> $GITHUB_OUTPUT
          echo "services=${{ env.SERVICES }}" >> $GITHUB_OUTPUT
          echo "feeds=${{ env.FEEDS }}" >> $GITHUB_OUTPUT
          echo "accounts=${{ env.ACCOUNTS }}" >> $GITHUB_OUTPUT
          echo "skip-all=${{ env.SKIP_ALL }}" >> $GITHUB_OUTPUT
          echo "release-version=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT
          echo "download-artifacts-from=${{ env.DOWNLOAD_ARTIFACTS_FROM }}" >> $GITHUB_OUTPUT
        )

    - name: Assert Release Exists
      id: assert-release-exists
      uses: insightsengineering/release-existence-action@v1
      if: ${{ env.SKIP_ALL != 'true' && env.DOWNLOAD_ARTIFACTS_FROM == 'Release' }}
      with:
        release-tag: ${{ env.RELEASE_VERSION }}

    - name: Validate Deployment Flags
      if: ${{ env.SKIP_ALL != 'true' && env.DOWNLOAD_ARTIFACTS_FROM == 'Release' && !steps.assert-release-exists.outputs.release-exists }} 
      run: |
        echo "::error::Unable to locate the Release for tag ${{ env.RELEASE_VERSION }}" && exit 1

    - name: Create Deployment Matrix
      id: set-deployment-matrix
      if: ${{ env.SKIP_ALL != 'true' }}
      run: |
        matrix_file="${{ runner.temp }}/appservice-matrix.txt"
        touch ${matrix_file}
        (shopt -s nocasematch;
          if [[ "${{ env.WEBSTORE }}" == "true" ]]; then
            echo 'webstore' >> ${matrix_file}
          fi
          if [[ "${{ env.MANAGER }}" == "true" ]]; then
            echo 'manager' >> ${matrix_file}
          fi
          if [[ "${{ env.SERVICES }}" == "true" ]]; then
            echo 'services' >> ${matrix_file}
          fi
          if [[ "${{ env.FEEDS }}" == "true" ]]; then
            echo 'feeds' >> ${matrix_file}
          fi
          if [[ "${{ env.ACCOUNTS }}" == "true" ]]; then
            echo 'accounts' >> ${matrix_file}
          fi
        )
        matrix_results="$(cat ${matrix_file} | jq --raw-input --slurp --compact-output 'split("\n") | map(select(. != ""))')"
        echo ${matrix_results}
        echo "appservices=${matrix_results}" >> $GITHUB_OUTPUT

  appservice-deployment:
    needs: [environment-details, resolve-deployment-tasks]
    name: ${{ format('fastchannel-{0}{1}', matrix.appservice, format('{0}{1}', matrix.appservice != 'accounts' && '-' || '', matrix.appservice != 'accounts' && needs.environment-details.outputs.appservice-suffix || '')) }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    if: ${{ needs.resolve-deployment-tasks.outputs.skip-all == 'false' }}
    strategy:
      fail-fast: false
      matrix:
        appservice: ${{ fromJSON(needs.resolve-deployment-tasks.outputs.appservices) }}
        os: [ubuntu-latest]
    
    environment:
      name: ${{ needs.environment-details.outputs.name }}
      url: ${{ needs.environment-details.outputs.url }}

    env:
      DEPLOYMENT_SKIPPED: false
      ARTIFACT_NAME: fastchannel-${{ matrix.appservice }}-zipdeploy.zip
      RELEASE_VERSION: ${{ needs.resolve-deployment-tasks.outputs.release-version }}
      DOWNLOAD_ARTIFACTS_FROM: ${{ needs.resolve-deployment-tasks.outputs.download-artifacts-from }}
      APPSERVICE_NAME: ${{ format('fastchannel-{0}{1}', matrix.appservice, format('{0}{1}', matrix.appservice != 'accounts' && '-' || '', matrix.appservice != 'accounts' && needs.environment-details.outputs.appservice-suffix || '')) }}

    steps:
    - name: Assert Deployment Flags
      run: >-
        echo "DEPLOYMENT_SKIPPED=${{
          needs.resolve-deployment-tasks.outputs.skip-all == 'true' ||
          needs.resolve-deployment-tasks.outputs[matrix.appservice] != 'true' }}" >> $GITHUB_ENV
        echo "DEPLOYMENT_SKIPPED=$DEPLOYMENT_SKIPPED"
    
    - name: Skipped deployment for ${{ env.APPSERVICE_NAME }}
      if: ${{ env.DEPLOYMENT_SKIPPED == 'true' }}
      run: echo "Skipped deployment of ${{ env.ARTIFACT_NAME }} into Azure AppService ${{ env.APPSERVICE_NAME }}"
    
    - name: '[DEBUG] Deploying into Azure AppService'
      if: ${{ env.DEPLOYMENT_SKIPPED != 'true' }}
      run: |
        echo "ARTIFACT_NAME=${{ env.ARTIFACT_NAME }}"
        echo "RELEASE_VERSION=${{ env.RELEASE_VERSION }}"
        echo "DOWNLOAD_ARTIFACTS_FROM=${{ env.DOWNLOAD_ARTIFACTS_FROM }}"
        echo "APPSERVICE_NAME=${{ env.APPSERVICE_NAME }}"
        echo "---------------------------------------------"

    # - name: Fetch Deployment Artifact
    #   if: ${{ env.DEPLOYMENT_SKIPPED != 'true' }}
    #   uses: dawidd6/action-download-artifact@v8
    #   with:
    #     github_token: ${{ secrets.FASTCHANNEL_MIRANDAASM_PAT }}
    #     workflow: Build.yml
    #     workflow_conclusion: success
    #     name: ${{ env.ARTIFACT_NAME }}
    #     path: ./artifacts
      
    # - name: 'Download [${{ matrix.appservice }}] Artifact'
    #   if: ${{ env.DEPLOYMENT_SKIPPED != 'true' }}
    #   uses: actions/download-artifact@v4
    #   with:
    #     merge-multiple: true
    #     path: ./artifacts
    #     name: ${{ matrix.appservice }}

    # - name: Login via Azure CLI
    #   if: ${{ env.DEPLOYMENT_SKIPPED != 'true' }}
    #   uses: azure/login@v2
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Deploy To Azure App Service
    #   if: ${{ env.DEPLOYMENT_SKIPPED != 'true' }}
    #   uses: azure/webapps-deploy@v3
    #   with:
    #     app-name: ${{ env.APPSERVICE_NAME }}
    #     package: ${{ env.ARTIFACT_NAME }}
